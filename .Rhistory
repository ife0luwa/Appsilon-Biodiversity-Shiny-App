)
# unit testing
expect_that(
"search query matches the result",
{
query <- as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12])
expect_match (query, "Hooded Crow")
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], "Hooded Crow")
}
)
expect_that(
"search query matches the result",
{
query <- as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12])
expect_known_output (query, "Hooded Crow")
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], "Hooded Crow")
}
)
expect_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], query)
}
)
# unit testing
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], query)
}
)
expec
# unit testing
expect_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], query)
}
)
# unit testing
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
#expect_equal(search.vernacular(occurence_poland, "Hooded Crow")[10, 12], query)
}
)
test_that(
"scientific search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 12]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 12]), query)
}
)
print(rr <- as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 12]))
print(rr <- search.scientific(occurence_poland, "Hooded Crow")[10, 12])
print(rr <- search.scientific(occurence_poland, "Hooded Crow")[10, 7])
print(rr <- search.scientific(occurence_poland, "Sciurus vulgaris")[10, 7])
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_known_output (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_known_output (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Sciurus vulgaris")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Hooded Crow")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Sciurus vulgari")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Sciurus vulgaris")[10, 7]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_equal (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_equal (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_equal (search.vernacular(occurence_poland, "Hooded Crow")[10, 12], query)
}
)
test_that(
"search query matches the result",
{
query <- "Hooded Crow"
expect_equal (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]), query)
}
)
test_that(
"search query matches the result",
{
query <- "Sciurus vulgaris"
expect_equal (as.character(search.scientific(occurence_poland, "Sciurus vulgaris")[10, 7]), query)
}
)
runApp()
runApp()
specieData <- search.vernacular(occurence_poland, "Hooded crow")
specieData$eventDate <- as.Date(specieData$eventDate)
ggplot(specieData, aes(x = eventDate, y=individualCount)) +
geom_point( color="#69b3a2") +
scale_x_date(date_labels = "%Y-%m")
time_plot <- ggplot(specieData, aes(x = eventDate, y=individualCount)) +
geom_point( color="#69b3a2") +
scale_x_date(date_labels = "%Y-%m")
print(time_plot)
shiny::runApp()
# unit test for search.vernacular and search.scientific
test_that(
"test that search query matches the result",
{
query <- "Hooded Crow"
expect_equal (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]),
query)
}
)
library(testthat)
# unit test for search.vernacular and search.scientific
test_that(
"test that search query matches the result",
{
query <- "Hooded Crow"
expect_equal (as.character(search.vernacular(occurence_poland, "Hooded Crow")[10, 12]),
query)
}
)
liss <- search.vernacular(occurence_poland, "Hooded Crow")
print(liss)
data.class(liss)
library(readr)
occurence_poland <- read_csv("occurence_poland.csv")
print(occurence_poland)
search.vernacular <- function(df, searchQuery) {
filter(df, grepl(searchQuery, df$vernacularName))
}
liss <- search.vernacular(occurence_poland, "Hooded Crow")
print(liss)
print(search.vernacular(occurence_poland, "Hooded Crow"))
library(readr)
library(dplyr)
library(tidyverse)
library(shiny)
library(shinythemes)
library(leaflet)
library(ggplot2)
occurence_poland <- read_csv("occurence_poland.csv")
search.vernacular <- function(df, searchQuery) {
filter(df, grepl(searchQuery, df$vernacularName))
}
testData <- search.vernacular(occurence_poland, "Hooded Crow")
testData$eventDate <- as.Date(testData$eventDate)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_point( color="#69b3a2") +
scale_x_date(date_labels = "%Y-%m")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%Y-%m")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y", date_breaks = "10 year")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 year")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y", date_breaks = "7 year")
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
print(time_plot)
View(testData)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min(dat$date), max(dat$date), length=6))
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min(testData$eventDate), max(testData$eventDate), length=6))
#breaks= seq(min(dat$date), max(dat$date), length=6)
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min("1995"), max(testData$eventDate), length=6))
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min(as.Date("1991-07-05")), max(testData$eventDate), length=6))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min(as.Date("1991-07-05")), max(testData$eventDate), date_breaks = "5 year"))
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(min(as.Date("1991-07-05")), max(testData$eventDate), by = "5 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1991-07-05"), max(testData$eventDate), by = "5 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "5 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "4 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "4 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
#scale_x_date(date_labels = "%b %Y", date_breaks = "5 year")
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#breaks= seq(min(dat$date), max(dat$date), length=6)
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("My x label") +
ylab("My y label") +
ggtitle("Weighted Scatterplot of Watershed Area vs. Discharge and Nitrogen Levels (PPM)") +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("Observation count") +
ggtitle("Triennial specie observation chart") +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("Triennial specie observation chart") +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: red;'>Triennial specie observation chart</span>") +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: red;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
library(ggtext)
install.packages("ggtext")
library(ggtext)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: red;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS")) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 21)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 15)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue', 'size:12'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue'; 'size:12';>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue';, 'size:12';>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue', 'size:12';>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue';>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 10)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 12)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
time_plot <- ggplot(testData, aes(x = eventDate, y=individualCount)) +
geom_line( color="#69b3a2") +
xlab("Date") +
ylab("bservation count") +
ggtitle("<span style = 'color: blue;'>Triennial specie observation chart</span>") +
theme(plot.title = element_markdown()) +
theme(text = element_text(family = "Comic Sans MS", size = 11)) +
scale_x_date(date_labels = "%b %Y", breaks= seq(as.Date("1995-07-05"), max(testData$eventDate), by = "3 year"))
#68
print(time_plot)
runApp()
View(occurence_poland)
runApp()
